///////////////////////////////////
///////////////////////////////////
///////////////////////////////////
///////////////////////////////////
///////////////////////////////////
///////////////////////////////////
///////////////////////////////////
///////////////////////////////////
///////////////////////////////////
///////////////////////////////////
//====================================
//   ∧＿＿∧    .｡*ﾟ+.*.｡*ﾟ+.*.｡｡*ﾟ+.*.｡
// （´・ω・`）< Mixins
//  ( つ旦つﾟ  +.*.｡｡*ﾟ+.*.｡.｡*ﾟ+.*.｡*ﾟ+.
//====================================

// （´・ω・`）< Breakpoint
// -------------------------------
$mq-breakpoints: (
  "sp": 400px,
  "tab": 768px,
  "pc": 1200px,
  "cinema": 1800px,
);

@mixin mq($breakpoint: tab, $rule: min, $subtraction: false) {
  $breakpoint: map_get($mq-breakpoints, $breakpoint);

  @if $rule==max and $subtraction {
    $breakpoint: $breakpoint - 1;
  }

  @media screen and (#{$rule}-width: $breakpoint) {
    @content;
  }
}

// （´・ω・`）< DebugMode
// -------------------------------
@mixin debug($color: red) {
  @if $debugMode {
    border: 1px dashed $color;
  } @else {
  }
}

// （´・ω・`）< Links
// -------------------------------
// @mixin link($type: inline, $bg: $c-primary, $color: $c-font-primary, $hover: $c-accent) {
//   @if $type==inline {
//     color: $color;
//     display: inline-block;
//     // color: $hover;
//     text-decoration: underline;
//     margin: 0 0.25em;

//     &.is-hover {
//       color: lighten($color, 20%);
//       // background: $hover;
//       // color: white;
//       text-decoration: none;
//       @extend %stripe;
//     }
//   }

//   @if $type==inline-block {
//     // color: $hover;
//     // text-decoration: underline;
//     display: inline-block;

//     &:hover,
//     &:active,
//     &:focus {
//       color: $hover;
//     }
//   }

//   @if $type==block {
//     background: $bg;
//     color: $hover;
//     text-decoration: underline;

//     &:hover,
//     &:active,
//     &:focus {
//       color: lighten($color, 20%);
//     }
//   }
// }

// @mixin bg-gradient($angle: 180deg, $color: #0bd, $amount: 20%) {
//   background: linear-gradient($angle, $color, adjust-hue($color, $amount)) fixed;
// }

// @mixin gradient-text($angle: 45deg, $color: #f82, $amount: 35%) {
//   color: $color;
//   background: -webkit-linear-gradient($angle, $color, adjust-hue($color, $amount));
//   -webkit-text-fill-color: transparent;
//   -webkit-background-clip: text;
//   display: inline-block;
// }

// @mixin arrow($size: 1em, $c-border-width: 1px, $c-border-style: solid, $c-border: $c-font-primary, $direction: right) {
//   content: "";
//   display: inline-block;
//   position: absolute;
//   top: 50%;
//   width: $size;
//   height: $size;
//   margin-top: -($size / 2);
//   border: $c-border-width $c-border-style $c-border;

//   @if $direction==up {
//     @include transform(rotate(-135deg));
//   } @else if $direction==under {
//     @include transform(rotate(45deg));
//   } @else if $direction==right {
//     @include transform(rotate(-45deg));
//   } @else if $direction==left {
//     @include transform(rotate(135deg));
//   } @else {
//     @include transform(rotate(#{$direction}deg));
//   }
// }

// （´・ω・`）< Flexbox
// -------------------------------
@mixin flexbox($display: flex, $direction: null, $wrap: wrap, $justify: null, $items: null, $content: null, $prefix: null) {
  display: $display;
  flex-flow: $direction $wrap;
  justify-content: $justify;
  align-items: $items;
  align-content: $content;
}

// （´・ω・`）< FlexContents
// -------------------------------
@mixin flexContents($div: 50%, $figure: 50%, $vertical: null, $horizontal: null, $device: tab) {
  figure {
    padding: 0 10px 20px;
  }

  @include mq($device, min) {
    @include flexbox(flex, null, wrap, $vertical, $horizontal, null);

    > p,
    > div {
      width: $div;
    }

    figure {
      width: $figure;
      padding: 0 20px 20px;
    }
  }
}

// （´・ω・`）< border
// -------------------------------
// @mixin border($direction: null, $px: 1px, $type: solid, $color: $c-border) {
//   @if $direction==null {
//     border: $px $type $color;
//   }
//   // border: 1px solid #000;
// }

@mixin fontawesome($family: "Font Awesome 5 Free", $weight: $reguler, $cont: f078) {
  $solid: 900;
  $reguler: 400;
  $light: 300;
  $brand: 400;
  font-family: $family;
  font-weight: $weight;
  content: "\f078";
}

// https: //web-guided.com/376/
// @mixin background-image($fileName) {
//   background-image: url($PATH_IMG + $fileName);
//   background-repeat: no-repeat;
//   background-position: 50% 50%;
//   @content;
// }

// @mixin center($direction) {
//   position: absolute;

//   @if $direction==xy {
//     top: 50%;
//     left: 50%;
//     transform: translate(-50%, -50%);
//   } @else if $direction==x {
//     left: 50%;
//     transform: translateX(-50%);
//   } @else if $direction==y {
//     top: 50%;
//     transform: translateY(-50%);
//   }
// }

// @mixin counter($numName, $beforeText, $afterText) {
//   content: "#{$beforeText}"counter(num_ + $numName)"#{$afterText}";
//   counter-increment: num_ + $numName;
// }

// @mixin gradient($startColor, $endColor, $orientation: ttob) {
//   background: $startColor;

//   @if $orientation==ttob {
//     background: -webkit-linear-gradient(top, #{$startColor} 0%, #{$endColor} 100%);
//     background: linear-gradient(to bottom, #{$startColor} 0%, #{$endColor} 100%);
//     filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$startColor}', endColorstr=' #{$endColor}', GradientType=0);
//   } @else if $orientation==ltor {
//     background: -webkit-linear-gradient(right, #{$startColor} 0%, #{$endColor} 100%);
//     background: linear-gradient(to right, #{$startColor} 0%, #{$endColor} 100%);
//     filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$startColor}', endColorstr=' #{$endColor}', GradientType=1);
//   }
// }

// @mixin icon($fileName, $width, $height) {
//   background: url($path_img + $fileName) no-repeat 50% 50%;
//   background-size: $width $height;
//   width: $width;
//   height: $height;
// }

// @mixin hover($flag: true) {
//   @include min-screen(900px) {
//     transition: 0.2s;

//     &:hover {
//       transition: 0.3s;

//       @if $flag==true {
//         opacity: 0.5;
//       }

//       @content;
//     }
//   }
// }

// @mixin triangle($direction, $width, $height, $color) {
//   width: 0;
//   height: 0;
//   border-style: solid;
//   $valWidth: $width / 2;
//   $valHeight: $height / 2;

//   @if ($direction==top) {
//     border-width: 0 $valWidth $height $valWidth;
//     border-color: transparent transparent $color transparent;
//   } @else if ($direction==left) {
//     border-width: $valHeight $width $valHeight 0;
//     border-color: transparent $color transparent transparent;
//   } @else if ($direction==right) {
//     border-width: $valHeight 0 $valHeight $width;
//     border-color: transparent transparent transparent $color;
//   } @else if ($direction==bottom) {
//     border-width: $height $valWidth 0 $valWidth;
//     border-color: $color transparent transparent transparent;
//   }
// }

// @mixin line($color: #ff0, $height: 65%) {
//   background: linear-gradient(transparent $height, $color 0%);
//   display: inline;
// }

// https: //kaminarimagazine.com/web/2017/12/12/sass%E3%81%A7%E3%82%88%E3%81%8F%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8Bmixin%E3%82%92%E7%B4%B9%E4%BB%8B%E3%81%97%E3%81%BE%E3%81%99/

// @mixin justify() {
//   text-align: justify;
//   text-justify: inter-ideograph;
// }

// @mixin lines-truncate($lines: 2) {
//   overflow: hidden;
//   display: -webkit-box;
//   -webkit-box-orient: vertical;
//   -webkit-line-clamp: $lines;
// }
// @mixin aspect-ratio($width, $height, $image_path: null) {
//   display: block;
//   width: 100%;
//   height: 0;
//   padding-top: ($height / $width) * 100%;

//   @if $image_path !=null {
//     background: url($image_path) 50% 50% no-repeat;
//     background-size: cover;
//   }
// }

@mixin box-white() {
  box-shadow: 0 0 20px rgba(black, 0.08);
  border-radius: 4px;
  // max-width: 600px;
  margin: auto;
  background: rgba(white, 0.7);
  backdrop-filter: blur(8px);
  margin-bottom: min(#{$g-xl}, 10vw);
  @include mq(tab, max, true) {
    padding: $g-l $g-m;
    // margin-bottom: min(#{$g-xl}, 20vw);
  }
  @include mq(tab, min) {
    padding: $g-xl;
    // margin-bottom: $g-xl;
  }
}
